$ git config --global user.name "Hongson"
$ git config --global user.email "all17lai@sina.com"

再次强调，如果使用了 --global 选项，那么该命令只需要运行一次，因为之后无论你在该系统上做任何事
情， Git 都会使用那些信息。当你想针对特定项目使用不同的用户名称与邮件地址时，可以在那个项目目录下运
行没有 --global 选项的命令来配置。

#Git 当时能找到的配置
$ git config --list

$ git config user.name
Hongson


$ git help <verb>
$ git <verb> --help
$ man git-<verb>
例如，要想获得 config 命令的手册，执行
$ git help config

#三种状态:"已提交（committed）、已修改（modified）和已暂存（staged）"

#在现有目录中初始化仓库
$ git init

#跟踪指定文件
$ git add file_name
#提交文件
$ git commit -m 'initial project version'

#克隆现有的仓库
$ git clone

#克隆仓库的命令格式是 git clone [url] 。比如，要克隆 Git 的可链接库 libgit2
$ git clone https://github.com/libgit2/libgit2


#检查当前文件状态
$ git status

#跟踪新文件
$ git add file_name
#此时再运行 git status 命令,只要在 Changes to be committed 这行下面的，就说明是已暂存状态。

#git status -s 命令或 git status --short
$ git status -s
?M README
MM Rakefile
A lib/git.rb
M lib/simplegit.rb
?? LICENSE.txt

新添加的未跟踪文件前面有 ?? 标记，新添加到暂存区中的文件前面有 A 标记，修改过的文件前面有 M 标记。你
可能注意到了 M 有两个可以出现的位置，出现在右边的 M 表示该文件被修改了但是还没放入暂存区，出现在靠左
边的 M 表示该文件被修改了并放入了暂存区。例如，上面的状态报告显示： README 文件在工作区被修改了但是
还没有将修改后的文件放入暂存区,lib/simplegit.rb 文件被修改了并将修改后的文件放入了暂存区。而
Rakefile 在工作区被修改并提交到暂存区后又在工作区中被修改了，所以在暂存区和工作区都有该文件被修改
了的记录。

#忽略文件   .gitignore
$ cat .gitignore
*.[oa]
*~
第一行所有以 .o 或 .a 结尾的文件
第二行忽略所有以波浪符（~）结尾的文件
文件 .gitignore 的格式规范如下：
. 所有空行或者以 ＃ 开头的行都会被 Git 忽略。
. 可以使用标准的 glob 模式匹配。
. 匹配模式可以以（/）开头防止递归。
. 匹配模式可以以（/）结尾指定目录。
. 要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（!）取反。

#要查看尚未暂存的文件更新了哪些部分
$ git diff

#若要查看已暂存的将要添加到下次提交里的内容，可以用 git diff --staged 命令。

#提交更新
$ git commit -m "32page"

跳过使用暂存区域
只要在提交的时候，给 git commit 加上 -a 选项，Git 就会自动把所有已经跟踪过的文件暂存起来一并提交，从而跳过 git add 步骤

移除文件
$ git rm file_name
如果删除之前修改过并且已经放到暂存区域的话，则必须要用强制删除选项 -f（译注：即 force 的首字母）
$ git rm -f file_name
想把文件从 Git 仓库中删除（亦即从暂存区域移除），但仍然希望保留在当前工作目录中
$ git rm --cached file_name

删除 log/ 目录下扩展名为 .log 的所有文件
$ git rm log/\*.log
删除以 ~ 结尾的所有文件
$ git rm \*~

移动文件or重命名
$ git mv file_from file_to

查看提交历史
-p 用来显示每次提交的内容差异。 -2 来仅显示最近两次提交。看到每次提交的简略的统计信息使用 --stat 选项
$ git log -p -2

Table 1. git log --pretty=format 常用的选项
选项	说明
%H	提交对象（commit）的完整哈希字串
%h	提交对象的简短哈希字串
%T	树对象（tree）的完整哈希字串
%t	树对象的简短哈希字串
%P	父对象（parent）的完整哈希字串
%p	父对象的简短哈希字串
%an	作者（author）的名字
%ae	作者的电子邮件地址
%ad	作者修订日期（可以用 --date= 选项定制格式）
%ar	作者修订日期，按多久以前的方式显示
%cn	提交者(committer)的名字
%ce	提交者的电子邮件地址
%cd	提交日期
%cr	提交日期，按多久以前的方式显示
%s	提交说明


